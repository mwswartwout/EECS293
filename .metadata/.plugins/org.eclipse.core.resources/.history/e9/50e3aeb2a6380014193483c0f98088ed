package hw2;

import static org.junit.Assert.*;

import java.util.HashSet;
import java.util.Set;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class LinkTest 
{
	@Rule public ExpectedException thrown = ExpectedException.none();
	
	@Test
	public void testSetUsers() 
	{
		SocialNetwork network = new SocialNetwork();
		Link testLink = new Link();
		
		//Invalid user test
		Set<User> invalidUsers = new HashSet<User>();
		User invalidUser1 = new User();
		User invalidUser2 = new User();
		invalidUsers.add(invalidUser1);
		invalidUsers.add(invalidUser2);
		assertFalse(testLink.setUsers(invalidUsers));
		
		//Valid user test
		Set<User> validUsers = new HashSet<User>();
		User validUser1 = new User();
		User validUser2 = new User();
		validUser1.setID("ID1");
		validUser2.setID("ID2");
		validUsers.add(validUser1);
		validUsers.add(validUser2);
		assertTrue(testLink.setUsers(validUsers));
		
		//Already valid test
		assertFalse(testLink.setUsers(validUsers));
		
		//Too many users test
		User validUser3 = new User();
		validUser3.setID("ID3");
		validUsers.add(validUser3);
		assertFalse(testLink.setUsers(validUsers));
	}

	@Test
	public void testIsValid()
	{
		SocialNetwork network = new SocialNetwork();
		Link testLink = new Link();
		
		//Invalid link test
		assertFalse(testLink.isValid());
		
		//Valid link test
		Set<User> validUsers = new HashSet<User>();
		User validUser1 = new User();
		User validUser2 = new User();
		validUser1.setID("ID1");
		validUser2.setID("ID2");
		validUsers.add(validUser1);
		validUsers.add(validUser2);
		testLink.setUsers(validUsers);
		assertTrue(testLink.isValid());
	}

	@Test
	public void testGetUsersException() throws UninitializedObjectException
	{		
		SocialNetwork network = new SocialNetwork();
		Link testLink = new Link();

		Set<User> validUsers = new HashSet<User>();
		User validUser1 = new User();
		User validUser2 = new User();
		validUser1.setID("ID1");
		validUser2.setID("ID2");
		validUsers.add(validUser1);
		validUsers.add(validUser2);
		testLink.setUsers(validUsers);
		assertEquals(testLink.getUsers(), validUsers);
		
		thrown.expect(UninitializedObjectException.class);
		Link invalidLink = new Link();
		assertEquals(invalidLink.getUsers(), validUsers);
	}

	@Test
	public void testEstablish() {
		fail("Not yet implemented");
	}

	@Test
	public void testTearDown() {
		fail("Not yet implemented");
	}

	@Test
	public void testIsActive() {
		fail("Not yet implemented");
	}

	@Test
	public void testFirstEvent() {
		fail("Not yet implemented");
	}

	@Test
	public void testNextEvent() {
		fail("Not yet implemented");
	}

	@Test
	public void testToString() {
		fail("Not yet implemented");
	}

}
